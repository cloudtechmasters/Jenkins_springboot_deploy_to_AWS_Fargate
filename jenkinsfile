pipeline {
    agent any
	  environment {
		  //registry = '451060642371.dkr.ecr.us-east-2.amazonaws.com/ecs-fargate:latest'
		  //dockerImage = ''
		  REPOSITORY_URI = '451060642371.dkr.ecr.us-east-2.amazonaws.com/ecs-fargate:latest'
      SERVICE_NAME = 'container-app-demo'
      TASK_FAMILY="container-app-demo" // at least one container needs to have the same name as the task definition
      DESIRED_COUNT="1"
      CLUSTER_NAME = "my-ECS-cluster"
      AWS_ID = credentials("aws-credentials")
      AWS_ACCESS_KEY_ID = "${env.AWS_ID_USR}"
      AWS_SECRET_ACCESS_KEY = "${env.AWS_ID_PSW}"
      AWS_DEFAULT_REGION = "us-east-2"
      EXECUTION_ROLE_ARN = "arn:aws:iam::451060642371:role/ecsTaskExecutionRole"
	  }
    stages {
        stage ('SCM') {
            steps {
                checkout([$class: 'GitSCM', 
                	branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, 
                	extensions: [], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [[url: 'https://github.com/tushardashpute/springboohello-CICD.git']]])
            }
        }
        stage ('Build Artifact') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage ('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build registry
                }
            }
        }
        stage ('Push Docker Image to ECR') {
            steps {
                script {
                    docker.withRegistry('${REPOSITORY_URI}', 'ecr:us-east-2:aws-credentials') {
                    dockerImage.push("${env.BUILD_NUMBER}")
                    dockerImage.push("latest")
                    }
                }
            }
        }
        stage('Deploy Task to ECS') {
            steps{
                // prepare task definition file
                sh """sed -e "s;%REPOSITORY_URI%;${REPOSITORY_URI};g" -e "s;%TASK_FAMILY%;${TASK_FAMILY};g" -e "s;%SERVICE_NAME%;${SERVICE_NAME};g" -e "s;%EXECUTION_ROLE_ARN%;${EXECUTION_ROLE_ARN};g" taskdef_template.json > taskdef_${env.BUILD_NUMBER}.json"""
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                script {
                    // Register task definition
                    sh("aws ecs register-task-definition --output json --cli-input-json file://${WORKSPACE}/taskdef_${env.BUILD_NUMBER}.json > ${env.WORKSPACE}/temp.json")
                    //def TASK_REVISION = sh (script: '`cat temp.json |grep -i revision| awk \'{print $2}\'`',returnStdout: true).trim()
                    //env.TASK_REVISION = getCommandOutput("cat temp.json |grep -i revision| awk \'{print ${2}}\'")
				
                    // update service
                    //sh(echo "aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:getCommandOutput(cat temp.json |grep -i revision| awk \'{print ${2}}\') --desired-count ${DESIRED_COUNT}")
                    
                }
                }
            }
        }
        stage('Update Task to ECS') {
          steps{
                // Update ECS service with task definition
                
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                script {
                    //def TASK_REVISION = sh (script: '`cat temp.json |grep -i revision| awk \'{print $2}\'`',returnStdout: true).trim()
                    TASK_REVISION = sh (script: 'cat temp.json |grep -i revision| awk \'{print $2}\'',returnStdout: true)
                    //sh("echo ${TASK_REVISION}")				
                    // update service
                    sh("aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --desired-count ${DESIRED_COUNT} --task-definition ${TASK_FAMILY}:${TASK_REVISION}")
                    
                }
                }
            }
        }
    }
}
